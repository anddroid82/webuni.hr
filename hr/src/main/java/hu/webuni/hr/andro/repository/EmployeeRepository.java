package hu.webuni.hr.andro.repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.data.jpa.repository.EntityGraph;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.PagingAndSortingRepository;

import hu.webuni.hr.andro.model.Company;
import hu.webuni.hr.andro.model.Employee;

public interface EmployeeRepository extends JpaRepository<Employee, Long>, PagingAndSortingRepository<Employee, Long>,
		JpaSpecificationExecutor<Employee> {

	@EntityGraph("Employee.full")
	@Query("select e from Employee e where e.id=:id")
	Optional<Employee> findByIdFull(long id);
	
	@EntityGraph("Employee.full")
	@Query("select e from Employee e")
	List<Employee> findAllFull();
	

	// a kezdeti adatfeltöltéshez használjuk, hogy törölje az összes employee
	// rekordot és
	// állítsa be az autogenerated id értékét 1-re
	@Modifying
	@Transactional
	@Query(value = "truncate table employee;ALTER SEQUENCE hibernate_sequence RESTART;", nativeQuery = true)
	void truncateTable();

	List<Employee> findByPaymentGreaterThan(int payment);

	List<Employee> findByPositionName(String name);

	List<Employee> findByNameStartsWithIgnoreCase(String name);

	List<Employee> findByEntranceBetween(LocalDateTime start, LocalDateTime end);

	List<Employee> findByPosition_NameAndPaymentLessThan(String p, int payment);
	
	//@EntityGraph("Employee.full")
	Optional<Employee> findByUsername(String username);

}
